{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","handlerAdd","useState","hasError","setHasError","selectedMovie","setSelectedMovie","searchQuery","setSearchQuery","isLoading","setIsLoading","onSubmit","event","query","preventDefault","fetch","then","res","json","catch","Response","Error","data","imgMovieUrl","Poster","newMovie","Title","Plot","imdbID","finally","htmlFor","type","id","placeholder","value","onChange","currentTarget","cn","onClick","disabled","App","setMovies","prevMovies","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb21e1db.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Movie } from '../../types/Movie';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  handlerAdd: (newMovie: Movie) => void;\n}\n\nconst baseImgUrl = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const FindMovie: React.FC<Props> = ({\n  handlerAdd,\n}) => {\n  const [hasError, setHasError] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState<Movie | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleQueryChange = (value: string) => {\n    setSearchQuery(value);\n\n    if (value) {\n      setHasError(false);\n    }\n  };\n\n  const handleFindMovie = () => {\n\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    getMovie(searchQuery).then(data => {\n      if ('Error' in data) {\n        setHasError(true);\n      } else {\n        const imgMovieUrl = data.Poster !== 'N/A'\n          ? data.Poster\n          : baseImgUrl;\n\n        const newMovie: Movie = {\n          title: data.Title,\n          description: data.Plot,\n          imgUrl: imgMovieUrl,\n          imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n          imdbId: data.imdbID,\n        };\n\n        setSelectedMovie(newMovie);\n      }\n    })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchQuery}\n              onChange={(event) => handleQueryChange(event.currentTarget.value)}\n            />\n          </div>\n\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button', 'is-light',\n                { 'is-loading': isLoading })}\n              onClick={handleFindMovie}\n              disabled={!searchQuery}\n            >\n              {!selectedMovie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n          </div>\n\n          {selectedMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  handlerAdd(selectedMovie);\n                  setSelectedMovie(null);\n                  setSearchQuery('');\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {selectedMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={selectedMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=6907443f';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onAddMovie = (newMovie: Movie) => {\n    if (newMovie) {\n      setMovies(prevMovies => {\n        return prevMovies\n          .some(({ imdbId }) => imdbId === newMovie.imdbId)\n          ? prevMovies\n          : [...prevMovies, newMovie];\n      });\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie handlerAdd={onAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}